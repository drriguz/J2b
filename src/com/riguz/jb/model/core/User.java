package com.riguz.jb.model.core;

import java.util.List;

import com.riguz.jb.model.core.base.BaseUser;
import com.riguz.jb.model.ext.sqlinxml.SqlKit;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	public static final User dao = new User();
	public enum FIELD {
		USER_ID("USER_ID"),
		LOGIN_NAME("LOGIN_NAME"),
		PASSWORD("PASSWORD"),
		EMAIL("EMAIL"),
		LAST_LOGIN_IP("LAST_LOGIN_IP"),
		LAST_LOGIN_DATE("LAST_LOGIN_DATE"),
		LOGIN_IP("LOGIN_IP"),
		LOGIN_DATE("LOGIN_DATE"),
		TOKEN_ID("TOKEN_ID"),
		FAIL_TOTAL("FAIL_TOTAL"),
		ACCOUNT_STATUS("ACCOUNT_STATUS"),
		ADDITIONAL_ID("ADDITIONAL_ID"),
		EMAIL_STATUS("EMAIL_STATUS"),
		PORTRAIT("PORTRAIT"),
		RESERVE("RESERVE"),
		REMARK("REMARK"),
		FROM_DATE("FROM_DATE"),
		THRU_DATE("THRU_DATE"),
		CREATED_DATE("CREATED_DATE"),
		LAST_UPDATED_DATE("LAST_UPDATED_DATE"),
		ACCOUNT_TYPE("ACCOUNT_TYPE"),
		LDAP_CN("LDAP_CN"),
		REAL_NAME("REAL_NAME"),
		GENDER("GENDER");

		final String field;

		private FIELD(String field) {
			this.field = field;
		}
	}
    /// {
    public enum ACCOUNT_STATUS {
        NORMAL("N"), WAITING("W"), LOCKED("L");

        final String accountStatus;

        private ACCOUNT_STATUS(String accountStatus) {
            this.accountStatus = accountStatus;
        }
    }

    public enum EMAIL_STATUS {
        CONFIRMED("A"), WAITING("W");

        final String emailStatus;

        private EMAIL_STATUS(String emailStatus) {
            this.emailStatus = emailStatus;
        }

    }

    public enum ACCOUNT_TYPE {
        USER("U");
        final String accountType;

        private ACCOUNT_TYPE(String accountType) {
            this.accountType = accountType;
        }
    }

    public List<Role> getRoles() {
        return Role.dao.find(SqlKit.sql("core.findUserRolesById"), this.getUserId());
    }

    public Role getNowRole() {
        return Role.dao.findFirst(SqlKit.sql("core.findUserRolesById"), this.getUserId());
    }

    public User findByLoginName(String loginName) {
        return User.dao.findFirst(SqlKit.sql("core.findUserByLoginName"), loginName);
    }

    public User findByEmail(String email) {
        return User.dao.findFirst(SqlKit.sql("core.findUserByEmail"), email);
    }

    public User findByUserId(String id) {
        return User.dao.findFirst(SqlKit.sql("core.findUserById"), id);
    }

    public User findByTokenId(String tokenId) {
        return User.dao.findFirst(SqlKit.sql("core.findUserByTokenId"), tokenId);
    }
    /// }
}
